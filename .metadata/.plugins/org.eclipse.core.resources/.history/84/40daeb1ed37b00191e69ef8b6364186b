package com.fuller.DungeonTrip.world;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.lwjgl.BufferUtils;
import org.lwjgl.stb.STBImage;

import com.fuller.DungeonTrip.Refs;
import com.fuller.DungeonTrip.Window;
import com.fuller.DungeonTrip.collision.AABB;
import com.fuller.DungeonTrip.render.Camera;
import com.fuller.DungeonTrip.render.Shader;

public class World {
	private int viewX, viewY;
	private byte[] tiles;
	private AABB[] bounding_boxes;
	private int width, height;
	private int scale;
	
	private Matrix4f world;
	
	public World(String world)
	{
		try {
			tileSheet(world);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//ByteBuffer entity_sheet = STBImage.stbi_load(Refs.res + "assets/levels/" + world + "_entity.png", w, h, comp, 4);
		
		
		//STBImage.stbi_image_free(entity_sheet);
	}
	
	private void tileSheet(String world) throws IOException
	{
		IntBuffer w = BufferUtils.createIntBuffer(1);
		IntBuffer h = BufferUtils.createIntBuffer(1);
		IntBuffer comp = BufferUtils.createIntBuffer(1);
		
		ByteBuffer tile_sheet = STBImage.stbi_load(Refs.res + "assets/levels/" + world + "_tiles.png", w, h, comp, 4);
		
		if(tile_sheet == null)
		{
			throw new RuntimeException("Failed to load level file!" + System.lineSeparator() + STBImage.stbi_failure_reason());
		}
		
		width = w.get();
		height = h.get();
		scale = 16;
		
		this.world = new Matrix4f().setTranslation(new Vector3f(0));
		this.world.scale(scale);
		
		tiles = new byte[width * height];
		bounding_boxes = new AABB[width * height];
		
		for(int y = 0; y < height; y++)
		{
			for(int x = 0; x < width; x++)
			{
				int red = (tile_sheet.get((x + y * width) * 4)) & 0xFF;
				System.out.println(red);
				Tile t;
				
				try
				{
					t = Tile.tiles[red];
				}
				catch(ArrayIndexOutOfBoundsException e)
				{
					//TODO: Set Tiles to 256 to avoid errors for now: Change back later. (255)
					t = null;
				}
				
				if(t != null)
				{
					setTile(t, x, y);
				}
			}
		}
		STBImage.stbi_image_free(tile_sheet);
	}
	
	public World()
	{
		width = 64;
		height = 64;
		scale = 16;
		
		tiles = new byte[width * height];
		bounding_boxes = new AABB[width * height];
		
		world = new Matrix4f().setTranslation(new Vector3f(0));
		world.scale(scale);
	}
	
	public void calculateView(Window window)
	{
		viewX = (window.getWidth() / (scale * 2));
		viewY = (window.getHeight() / (scale * 2));
	}
	
	public void render(TileRenderer render, Shader shader, Camera camera)
	{
		int posX = (int)camera.getPosition().x / (scale * 2);
		int posY = (int)camera.getPosition().y / (scale * 2);
		
		for(int i = 0; i < viewX; i++)
		{
			for(int j = 0; j < viewY; j++)
			{
				Tile t = getTile(i - posX, j + posY);
				
				if(t != null)
				{
					render.renderTile(t, i - posX - (viewX / 2) + 1, -j - posY + (viewY / 2), shader, world, camera);
				}
			}
		}
	}
	
	public void correctCamera(Camera camera, Window window)
	{
		Vector3f pos = camera.getPosition();
		
		int w = -width * scale * 2;
		int h = height * scale * 2;
		
		if(pos.x > -(window.getWidth() / 2) + scale)
		{
			pos.x = -(window.getWidth() / 2) + scale;
		}
		if(pos.x < w + (window.getWidth() / 2) + scale)
		{
			pos.x = w + (window.getWidth() / 2) + scale;
		}
		
		if(pos.y < (window.getHeight() / 2) - scale)
		{
			pos.y = (window.getHeight() / 2) - scale;
		}
		if(pos.y > h - (window.getHeight() / 2) - scale)
		{
			pos.y = h - (window.getHeight() / 2) - scale;
		}
	}
	
	public void setTile(Tile tile, int x, int y)
	{
		if((x + y * width) == 2079)
		{
			return; // Don't use this space.
		}
		tiles[x + y * width] = tile.getId(); //TODO: ERROR HERE
		
		if(tile.isSolid())
		{
			bounding_boxes[x + y * width] = new AABB(new Vector2f(x*2, -y*2), new Vector2f(1, 1));
		}
		else
		{
			bounding_boxes[x + y * width] = null;
		}
	}
	
	public Tile getTile(int x, int y)
	{
		try
		{
			return Tile.tiles[tiles[x + y * width]];
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			return null;
		}
	}
	
	public AABB getTileBoundingBox(int x, int y)
	{
		try
		{
			return bounding_boxes[x + y * width];
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			return null;
		}
	}

	public int getScale() {
		return scale;
	}

}
