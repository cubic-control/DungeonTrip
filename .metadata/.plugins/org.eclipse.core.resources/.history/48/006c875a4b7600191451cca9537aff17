package com.fuller.DungeonTrip;

import java.nio.FloatBuffer;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL15;

public class Model {
	private int draw_count;
	private int v_id;
	private int t_id;
	
	public Model(float[] vertices, float[] tex_coords)
	{
		draw_count = vertices.length / 3;
		
		v_id = GL15.glGenBuffers();
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, v_id);
		GL15.glBufferData(GL15.GL_ARRAY_BUFFER, createBuffer(vertices), GL15.GL_STATIC_DRAW);
		
		t_id = GL15.glGenBuffers();
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, t_id);
		GL15.glBufferData(GL15.GL_ARRAY_BUFFER, createBuffer(tex_coords), GL15.GL_STATIC_DRAW);
		
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
	}
	
	public void render()
	{
		GL15.glEnableClientState(GL15.GL_VERTEX_ARRAY);
		GL15.glEnableClientState(GL15.GL_TEXTURE_COORD_ARRAY);
		
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, v_id);
		GL15.glVertexPointer(3, GL15.GL_FLOAT, 0, 0);
		
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, t_id);
		GL15.glTexCoordPointer(2, GL15.GL_FLOAT, 0, 0);
		
		GL15.glDrawArrays(GL15.GL_TRIANGLES, 0, draw_count);
		
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
		
		GL15.glDisableClientState(GL15.GL_VERTEX_ARRAY);
		GL15.glDisableClientState(GL15.GL_TEXTURE_COORD_ARRAY);
	}
	
	private FloatBuffer createBuffer(float[] data)
	{
		FloatBuffer buffer = BufferUtils.createFloatBuffer(data.length);
		buffer.put(data);
		buffer.flip();
		return buffer;
	}

}
